plugins {
    id 'java'
}

group = 'org.translator'
version = '0.1.0'

repositories {
    mavenCentral()
}

configurations {
    xjc
}

dependencies {
    // JAXB API for generated annotations
    compileOnly 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'

    // Test-time JAXB runtime and JUnit
    testImplementation 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

    // XJC toolchain (Jakarta JAXB 4.x)
    xjc 'org.glassfish.jaxb:jaxb-xjc:4.0.5'
    xjc 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
}

// Generate Java classes from pain.001.001.12.xsd using XJC
def painGenDir = layout.buildDirectory.dir('generated/pain001')

tasks.register('generatePain001', JavaExec) {
    group = 'codegen'
    description = 'Generate Java POJOs from pain.001.001.12.xsd using JAXB XJC'
    classpath = configurations.xjc
    mainClass = 'com.sun.tools.xjc.Driver'
    // Arguments: -d outputDir -p basePackage xsdPath
    args '-d', painGenDir.get().asFile.absolutePath,
         '-p', 'org.iso20022.pain_001_001_12',
         project.rootProject.file('pain.001.001.12.xsd').absolutePath
    inputs.file(project.rootProject.file('pain.001.001.12.xsd'))
    outputs.dir(painGenDir)
    doFirst {
        painGenDir.get().asFile.mkdirs()
        println "Generating JAXB classes to ${painGenDir.get().asFile}"
    }
}

// Generate Java classes from pacs.008.001.13.xsd using XJC
def pacs008GenDir = layout.buildDirectory.dir('generated/pacs008')

tasks.register('generatePacs008', JavaExec) {
    group = 'codegen'
    description = 'Generate Java POJOs from pacs.008.001.13.xsd using JAXB XJC'
    classpath = configurations.xjc
    mainClass = 'com.sun.tools.xjc.Driver'
    // Arguments: -d outputDir -p basePackage xsdPath
    args '-d', pacs008GenDir.get().asFile.absolutePath,
         '-p', 'org.iso20022.pacs_008_001_13',
         project.rootProject.file('pacs.008.001.13.xsd').absolutePath
    inputs.file(project.rootProject.file('pacs.008.001.13.xsd'))
    outputs.dir(pacs008GenDir)
    doFirst {
        pacs008GenDir.get().asFile.mkdirs()
        println "Generating JAXB classes to ${pacs008GenDir.get().asFile}"
    }
}

sourceSets {
    main {
        java {
            srcDir painGenDir
            srcDir pacs008GenDir
        }
    }
}

compileJava.dependsOn tasks.named('generatePain001'), tasks.named('generatePacs008')

test {
    useJUnitPlatform()
}
